{"version":3,"sources":["JSONEditorReact.js","App.js","index.js"],"names":["JSONEditorReact","options","Object","assign","this","props","json","text","jsoneditor","JSONEditor","container","set","setText","schema","cloneDeep","schemaRefs","nextProps","nextState","update","updateText","JSON","stringify","parse","indentation","e","console","log","setMode","mode","schemaChanged","isEqual","schemaRefsChanged","setSchema","destroy","className","ref","elem","Component","title","modes","App","state","onChangeText","setState","onModeChangeSelect","event","target","value","onModeChange","ReactDOM","render","document","getElementById"],"mappings":"gUASqBA,G,0MAIjB,IAAMC,EAAUC,OAAOC,OAAO,GAAIC,KAAKC,cAChCJ,EAAQK,YACRL,EAAQM,KAEfH,KAAKI,WAAa,IAAIC,IAAWL,KAAKM,UAAWT,GAE7C,SAAUG,KAAKC,OACjBD,KAAKI,WAAWG,IAAIP,KAAKC,MAAMC,MAE7B,SAAUF,KAAKC,OACjBD,KAAKI,WAAWI,QAAQR,KAAKC,MAAME,MAErCH,KAAKS,OAASC,IAAUV,KAAKC,MAAMQ,QACnCT,KAAKW,WAAaD,IAAUV,KAAKC,MAAMU,c,0CAGrBC,EAAWC,GAK7B,GAJI,SAAUD,GACZZ,KAAKI,WAAWU,OAAOF,EAAUV,MAG/B,SAAUU,EACZ,IACEZ,KAAKI,WAAWW,WAAWC,KAAKC,UAAUD,KAAKE,MAAMN,EAAUT,MAAO,KAAMH,KAAKC,MAAMkB,cACvF,MAAOC,GACPC,QAAQC,IAAI,SAIZ,SAAUV,GACZZ,KAAKI,WAAWmB,QAAQX,EAAUY,MAKpC,IAAMC,GAAiBC,IAAQd,EAAUH,OAAQT,KAAKS,QAChDkB,GAAqBD,IAAQd,EAAUD,WAAYX,KAAKW,aAC1Dc,GAAiBE,KACnB3B,KAAKS,OAASC,IAAUE,EAAUH,QAClCT,KAAKW,WAAaD,IAAUE,EAAUD,YACtCX,KAAKI,WAAWwB,UAAUhB,EAAUH,OAAQG,EAAUD,e,6CAKpDX,KAAKI,YACPJ,KAAKI,WAAWyB,Y,+BAIV,IAAD,OACP,OACI,yBAAKC,UAAU,6BAA6BC,IAAK,SAAAC,GAAI,OAAI,EAAK1B,UAAY0B,S,GAxDrCC,cCJvCxB,G,OAAS,CACbyB,MAAO,mBAGHhC,EAAO,CACX,MAAS,CAAC,EAAG,EAAG,GAChB,SAAW,EACX,KAAQ,KACR,OAAU,OACV,OAAU,CAAC,EAAK,IAAK,EAAK,KAC1B,OAAU,eAGNiC,EAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QA+DhCC,E,2MA5DbC,MAAQ,CACN5B,SACAN,KAAMa,KAAKC,UAAUf,EAAM,KAAM,GACjCsB,KAAM,Q,EA4CRc,aAAe,SAACnC,GACd,EAAKoC,SAAS,CAAEpC,U,EAGlBqC,mBAAqB,SAACC,GACpB,EAAKF,SAAS,CAAEf,KAAMiB,EAAMC,OAAOC,S,EAGrCC,aAAe,SAACpB,GACd,EAAKe,SAAS,CAAEf,U,wEAjDhB,OACE,yBAAKM,UAAU,OACb,yBAAKA,UAAU,YAQb,kBAAC,EAAD,CACIrB,OAAQT,KAAKqC,MAAM5B,OACnBN,KAAMH,KAAKqC,MAAMlC,KACjBqB,KAAMW,EAAM,GAEZhB,YAAa,EACbmB,aAActC,KAAKsC,aACnBM,aAAc5C,KAAK4C,eAEvB,kBAAC,EAAD,CACInC,OAAQT,KAAKqC,MAAM5B,OACnBN,KAAMH,KAAKqC,MAAMlC,KACjBqB,KAAMW,EAAM,GAEZhB,YAAa,EACbmB,aAActC,KAAKsC,aACnBM,aAAc5C,KAAK4C,qB,GAlCfX,aCflBY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.71f23393.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport isEqual from 'lodash/isEqual';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport JSONEditor from 'jsoneditor';\r\nimport 'jsoneditor/dist/jsoneditor.css';\r\n\r\nimport './JSONEditorReact.css';\r\n\r\nexport default class JSONEditorReact extends Component {\r\n  componentDidMount () {\r\n    // copy all properties into options for the editor\r\n    // (except the properties for the JSONEditorReact component itself)\r\n    const options = Object.assign({}, this.props);\r\n    delete options.json;\r\n    delete options.text;\r\n\r\n    this.jsoneditor = new JSONEditor(this.container, options);\r\n\r\n    if ('json' in this.props) {\r\n      this.jsoneditor.set(this.props.json);\r\n    }\r\n    if ('text' in this.props) {\r\n      this.jsoneditor.setText(this.props.text);\r\n    }\r\n    this.schema = cloneDeep(this.props.schema);\r\n    this.schemaRefs = cloneDeep(this.props.schemaRefs);\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if ('json' in nextProps) {\r\n      this.jsoneditor.update(nextProps.json);\r\n    }\r\n\r\n    if ('text' in nextProps) {\r\n      try {\r\n        this.jsoneditor.updateText(JSON.stringify(JSON.parse(nextProps.text), null, this.props.indentation));\r\n      } catch (e) {\r\n        console.log('ERROR');\r\n      }\r\n    }\r\n\r\n    if ('mode' in nextProps) {\r\n      this.jsoneditor.setMode(nextProps.mode);\r\n    }\r\n\r\n    // store a clone of the schema to keep track on when it actually changes.\r\n    // (When using a PureComponent all of this would be redundant)\r\n    const schemaChanged = !isEqual(nextProps.schema, this.schema);\r\n    const schemaRefsChanged = !isEqual(nextProps.schemaRefs, this.schemaRefs);\r\n    if (schemaChanged || schemaRefsChanged) {\r\n      this.schema = cloneDeep(nextProps.schema);\r\n      this.schemaRefs = cloneDeep(nextProps.schemaRefs);\r\n      this.jsoneditor.setSchema(nextProps.schema, nextProps.schemaRefs);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    if (this.jsoneditor) {\r\n      this.jsoneditor.destroy();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"jsoneditor-react-container\" ref={elem => this.container = elem} />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport JSONEditorReact from './JSONEditorReact';\r\nimport './App.css';\r\n\r\nconst schema = {\r\n  title: 'Example Schema'\r\n};\r\n\r\nconst json = {\r\n  'array': [1, 2, 3],\r\n  'boolean': true,\r\n  'null': null,\r\n  'number': 'four',\r\n  'object': {'a': 'b', 'c': 'd'},\r\n  'string': 'Hello World'\r\n};\r\n\r\nconst modes = ['tree', 'form', 'view', 'code', 'text'];\r\n\r\nclass App extends Component {\r\n  state = {\r\n    schema,\r\n    text: JSON.stringify(json, null, 2),\r\n    mode: 'tree'\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"contents\">\r\n          {/* <div className=\"mode\">\r\n            mode: <select value={this.state.mode} onChange={this.onModeChangeSelect}>\r\n              {\r\n                modes.map(mode => <option key={mode} value={mode}>{mode}</option>)\r\n              }\r\n            </select>\r\n          </div> */}\r\n          <JSONEditorReact\r\n              schema={this.state.schema}\r\n              text={this.state.text}\r\n              mode={modes[3]}\r\n              // modes={modes}\r\n              indentation={4}\r\n              onChangeText={this.onChangeText}\r\n              onModeChange={this.onModeChange}\r\n          />\r\n          <JSONEditorReact\r\n              schema={this.state.schema}\r\n              text={this.state.text}\r\n              mode={modes[0]}\r\n              // modes={modes}\r\n              indentation={4}\r\n              onChangeText={this.onChangeText}\r\n              onModeChange={this.onModeChange}\r\n          />\r\n          {/* <div className=\"code\">\r\n            <pre>\r\n              <code>\r\n                {this.state.text}\r\n              </code>\r\n            </pre>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onChangeText = (text) => {\r\n    this.setState({ text });\r\n  };\r\n\r\n  onModeChangeSelect = (event) => {\r\n    this.setState({ mode: event.target.value });\r\n  };\r\n\r\n  onModeChange = (mode) => {\r\n    this.setState({ mode });\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}